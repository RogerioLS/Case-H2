import yfinance as yf
import numpy as np
import time
import pandas as pd
from tqdm import tqdm

class AssetAnalyzer:
    """
    Classe para an√°lise de ativos utilizando dados hist√≥ricos do Yahoo Finance.
    
    Essa classe oferece m√©todos para:
      - Verificar a liquidez (volume m√©dio) dos ativos.
      - Calcular o beta do ativo em rela√ß√£o a um benchmark.
      - Calcular o Sharpe Ratio.
      - Obter o P/E Ratio.
      - Calcular o momentum.
      - Processar ativos em lotes para evitar bloqueios em requisi√ß√µes.
    
    Por padr√£o, os dados s√£o coletados para um per√≠odo de 6 meses, o que permite uma an√°lise 
    de m√©dio prazo dos ativos. As pausas entre as requisi√ß√µes e entre os lotes (0.5 e 5 segundos, 
    respectivamente) s√£o utilizadas para evitar bloqueios por excesso de requisi√ß√µes √† API.
    """
    
    def __init__(
        self,
        tickers: list,
        period: str = "6mo",
        batch_size: int = 100,
        sleep_between_requests: float = 0.5,
        sleep_between_batches: float = 5.0
    ):
        """
        Inicializa a inst√¢ncia do AssetAnalyzer.
        
        Args:
            tickers (list): Lista de tickers a serem analisados.
            period (str, opcional): Intervalo de tempo para coleta dos dados (padr√£o "6mo").
            batch_size (int, opcional): N√∫mero de tickers a processar por lote (padr√£o 100).
            sleep_between_requests (float, opcional): Tempo de pausa entre requisi√ß√µes individuais (padr√£o 0.5s).
            sleep_between_batches (float, opcional): Tempo de pausa entre os lotes de requisi√ß√µes (padr√£o 5.0s).
        """
        self.tickers = tickers
        self.period = period
        self.batch_size = batch_size
        self.sleep_between_requests = sleep_between_requests
        self.sleep_between_batches = sleep_between_batches

    def get_liquidity(self, tickers: list) -> dict:
        """
        Verifica a liquidez dos ativos, calculando o volume m√©dio de negocia√ß√£o.
        
        Para cada ticker, busca dados hist√≥ricos (√∫ltimos 6 meses por padr√£o) e calcula a m√©dia 
        do volume di√°rio. Caso os dados estejam ausentes, define o volume como zero.
        
        Args:
            tickers (list): Lista de tickers a serem verificados.
        
        Returns:
            dict: Dicion√°rio onde a chave √© o ticker e o valor √© o volume m√©dio.
        """
        liquidity = {}
        for ticker in tqdm(tickers, desc="Verificando liquidez"):
            try:
                stock = yf.Ticker(ticker)
                data = stock.history(period=self.period)
                avg_volume = data['Volume'].mean()
                liquidity[ticker] = avg_volume if avg_volume is not None else 0
                time.sleep(self.sleep_between_requests)
            except Exception as e:
                print(f"Erro ao processar {ticker}: {e}")
                liquidity[ticker] = 0
        return liquidity

    def get_beta(self, ticker: str, market_ticker: str = '^BVSP') -> float:
        """
        Calcula o beta de um ativo em rela√ß√£o a um √≠ndice de mercado.
        
        O beta √© calculado com base nos retornos di√°rios dos ativos e do √≠ndice, considerando 
        apenas datas em que ambos possuem dados dispon√≠veis. Retorna None caso os dados estejam vazios.
        
        Args:
            ticker (str): Ticker do ativo.
            market_ticker (str, opcional): Ticker do √≠ndice de mercado (padr√£o '^BVSP').
        
        Returns:
            float: Valor do beta calculado ou None se n√£o for poss√≠vel calcular.
        """
        try:
            stock = yf.Ticker(ticker)
            market = yf.Ticker(market_ticker)
            
            stock_data = stock.history(period=self.period)['Close']
            market_data = market.history(period=self.period)['Close']
            
            if stock_data.empty or market_data.empty:
                print(f"Dados vazios para {ticker} ou {market_ticker}")
                return None
            
            # Alinhar as datas dos dados dos dois ativos
            # Remove datas com dados ausentes
            aligned_data = pd.DataFrame({
                'stock': stock_data,
                'market': market_data
            }).dropna()

            stock_returns = aligned_data['stock'].pct_change().dropna()
            market_returns = aligned_data['market'].pct_change().dropna()
            
            if stock_returns.empty or market_returns.empty:
                print(f"Retornos vazios para {ticker} ou {market_ticker}")
                return None
            
            covariance = np.cov(stock_returns, market_returns)[0][1]
            market_variance = np.var(market_returns)
            beta = covariance / market_variance
            return beta
        except Exception as e:
            print(f"Erro ao calcular beta para {ticker}: {e}")
            return None

    def get_sharpe_ratio(self, ticker: str, risk_free_rate: float = 0.06) -> float:
        """
        Calcula o Sharpe Ratio de um ativo.
        
        O Sharpe Ratio √© calculado como a diferen√ßa entre o retorno m√©dio do ativo e a taxa 
        livre de risco (ajustada para o per√≠odo di√°rio), dividido pela volatilidade dos retornos.
        
        Args:
            ticker (str): Ticker do ativo.
            risk_free_rate (float, opcional): Taxa livre de risco anual (padr√£o 0.06).
        
        Returns:
            float: Valor do Sharpe Ratio ou None se n√£o for poss√≠vel calcular.
        """
        try:
            stock = yf.Ticker(ticker)
            data = stock.history(period=self.period)['Close']
            daily_returns = data.pct_change().dropna()
            
            avg_return = daily_returns.mean()
            volatility = daily_returns.std()

            sharpe_ratio = (avg_return - risk_free_rate / 252) / volatility
            return sharpe_ratio
        except Exception as e:
            print(f"Erro ao calcular Sharpe Ratio para {ticker}: {e}")
            return None

    def get_pe_ratio(self, ticker: str) -> float:
        """
        Obt√©m o P/E Ratio (rela√ß√£o pre√ßo/lucro) de um ativo.
        
        Busca o valor na propriedade 'trailingPE' disponibilizada pela API do Yahoo Finance.
        
        Args:
            ticker (str): Ticker do ativo.
        
        Returns:
            float: Valor do P/E Ratio ou None se n√£o estiver dispon√≠vel.
        """
        try:
            stock = yf.Ticker(ticker)
            pe_ratio = stock.info.get('trailingPE', None)
            return pe_ratio
        except Exception as e:
            print(f"Erro ao obter P/E Ratio para {ticker}: {e}")
            return None

    def get_momentum(self, ticker: str, period: str = None) -> float:
        """
        Calcula o momentum de um ativo.
        
        O momentum √© definido como a soma das varia√ß√µes percentuais do fechamento dos pre√ßos ao longo do per√≠odo.
        Caso o per√≠odo n√£o seja informado, utiliza o per√≠odo padr√£o definido na inst√¢ncia.
        
        Args:
            ticker (str): Ticker do ativo.
            period (str, opcional): Intervalo de tempo para an√°lise (ex: '6mo'). Se None, utiliza self.period.
        
        Returns:
            float: Valor do momentum ou None se n√£o for poss√≠vel calcular.
        """
        try:
            period_to_use = period if period is not None else self.period
            stock = yf.Ticker(ticker)
            data = stock.history(period=period_to_use)['Close']
            momentum = data.pct_change().sum()
            return momentum
        except Exception as e:
            print(f"Erro ao calcular Momentum para {ticker}: {e}")
            return None

    def process_in_batches(self) -> list:
        """
        Processa os tickers em lotes, calculando diversas m√©tricas para cada ativo.
        
        Para cada lote:
          - Verifica a liquidez dos ativos.
          - Calcula beta, Sharpe Ratio, P/E Ratio e momentum.
          - Armazena os resultados em uma lista de dicion√°rios.
        
        S√£o adicionadas pausas entre os ativos e entre os lotes para evitar bloqueios nas requisi√ß√µes.
        
        Returns:
            list: Lista de dicion√°rios contendo as m√©tricas para cada ativo.
        """
        selected_assets = []
        
        # Dividindo os tickers em lotes conforme o batch_size definido
        total_batches = (len(self.tickers) + self.batch_size - 1) // self.batch_size
        for i in range(0, len(self.tickers), self.batch_size):
            batch = self.tickers[i:i+self.batch_size]
            print(f"\nüîÑ Processando lote {i // self.batch_size + 1} de {total_batches}...\n")
            
            liquidity = self.get_liquidity(batch)
            
            for ticker in tqdm(batch, desc="Analisando ativos", position=0):
                try:
                    beta = self.get_beta(ticker)
                    sharpe = self.get_sharpe_ratio(ticker)
                    pe_ratio = self.get_pe_ratio(ticker)
                    momentum = self.get_momentum(ticker)
                    
                    print(f"Analisando {ticker}: Beta={beta}, Sharpe={sharpe}, PE={pe_ratio}, Momentum={momentum}")
                    
                    selected_assets.append({
                        'ticker': ticker,
                        'liquidity': liquidity[ticker],
                        'beta': beta,
                        'sharpe': sharpe,
                        'pe_ratio': pe_ratio,
                        'momentum': momentum
                    })
                    
                    time.sleep(self.sleep_between_requests)
                except Exception as e:
                    print(f"Erro ao processar {ticker}: {e}")
            
            print("‚è≥ Aguardando para evitar limita√ß√£o...")
            time.sleep(self.sleep_between_batches)
        
        return selected_assets

# Leitura dos tickers a partir de um arquivo
with open("/workspaces/Case-H2/data/valid_tickers/valid_tickers_part_4.txt", "r") as file:
    tickers_list = [line.strip() for line in file.readlines()]

# Cria√ß√£o da inst√¢ncia do AssetAnalyzer
analyzer = AssetAnalyzer(
    tickers=tickers_list,
    period="6mo",           # Utilizando dados dos √∫ltimos 6 meses
    batch_size=100,
    sleep_between_requests=0.5,
    sleep_between_batches=5.0
)

# Processamento dos ativos em lotes
selected_assets = analyzer.process_in_batches()

# Cria√ß√£o do DataFrame e salvamento em CSV para an√°lise futura
df = pd.DataFrame(selected_assets)
df.to_csv("selected_assets_5.csv", index=False)
print("\nAtivos selecionados salvos em 'selected_assets_5.csv'")